Professor AX Pro Backend Documentation 
Tuesday, October 14, 2025 10:11 AM 
Supabase 
To set up Supabase on your frontend first ensure the JS library
is installed: 
 
npm install @supabase/supabase-js 
 
Add the following code to your script: 
 
import { createClient } from
'@supabase/supabase-js' 
const supabase =
createClient(SUPABASE_URL,
SUPABASE_ANON_KEY) 
 
Our URL and ANON_KEY values are: 
 
SUPABASE_URL=https://qpyteahuynkgkbmdasbv.
supabase.co 
SUPABASE_ANON_KEY=eyJhbGciOiJIUzI1NiIsInR5
cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZ
iI6InFweXRlYWh1eW5rZ2tibWRhc2J2Iiwicm9sZSI
6ImFub24iLCJpYXQiOjE3NTk5NDk2NTcsImV4cCI6M
jA3NTUyNTY1N30.qvp5ox6Xm0wYcZK89S2MYVu18fq
yfYmT8nercIFMKOY 
 
We have 5 data tables set up under our professor-ax-pro
project in Supabase:  
prompts, session, chat, admin_feedback, user_feedback 
 
Prompts 
The prompts table contains all data of all past and current
prompts used by the Professor AX Pro system. The table looks
like this: 
 
The values for id and created_at are automatically set upon
creation of new prompt data. So when saving new prompt data
we will only need to worry about setting the prompt_text
value.  
 
At the moment the n8n workflow the system is built around
takes the prompt data with the most recent created_at date
and  
 
Here is some example Javascript that can be used to show the
entire list of data from the prompts table: 
 
async function getAllPrompts() { 
  const { data, error } = await supabase 
    .from('prompts')     // table name 
    .select('*')          // fetch all
columns 
    .order('created_at', { ascending:
false })  // optional ordering 
 
  if (error) { 
    console.error('Error fetching
prompts:', error.message) 
    return [] 
  } 
 
  console.log('Prompts:', data) 
  return data 
} 
 
 
Session & Chat 
Session and chat data are automatically created within the n8n
workflow using sql queries. To ensure that the data is properly
created the JSON body used to make the API call to the n8n10/14/25, 3:20 PM OneNote
https://tecace.sharepoint.com/sites/PM-MarketingTeam/_layouts/15/Doc.aspx?sourcedoc={79068749-5424-4c58-88f8-aad6c753a60f}&action=edit&wd=target%28%… 1/5
workflow should contain sessionId and chatId. The JSON
body should look like the following example: 
 
    { 
      "sessionId" : "test2a0ea75d4e1c94f8afa2c39f8a10" , 
      "chatId" : "test000000000000001" , 
      "userId" : "409esj1923" , 
      "action" : "sendMessage" , 
      "chatInput" : "What is the PSDAP program?"  
    } 
 
When the n8n workflow creates a new chat data it populates
the below data table where like before id and created_at are
automatically set upon creation. Out of all the below fields only
session_id and chat_id are required fields, which is why
sessionId and chatId are necessary within the JSON body
above. 
 
 
The same session_id saved to chat data is also used to create
session data forming a parent child relationship allowing us to
group chat data by user session. Session data looks as it does
below: 
 
 
Because the data is automatically created by n8n upon new
chat message the frontend will only need to be concerned with
pulling data which can be handled the same as the above code
to getAllPrompts() but instead of .from('prompts') you'd pull
.from('chat') 
 
Admin Feedback 
The data pulled from admin_feedback will be used to create
both the Feedback and FAQ sections in the prompt being used
by the system in n8n. The table is set up as shown below (as
usual id and created_at are automatically set): 
 
The only required field is the chat_id which should reference
the unique id created for the chat message for which the admin
feedback is being made. The updated_at field is a date/time
field that should only exist if the feedback gets updated,
feedback_verdict should be good or bad, feedback_text will
update the feedback section of the prompt and
corrected_response will update the FAQ section. 
 
From the dashboard we will only need to be concerned with
retrieving, creating, deleting or updating admin_feedback data.
Below is example Javascript to create a new admin_feedback
data assuming the variables chat_id, feedback_verdict,
feedback_text, corrected_response, and updated_at are
defined elsewhere on the script file. 
 
async function createAdminFeedback({ 
  chat_id,        // chat message's unique
id 
  feedback_verdict = null,        //
"good" / "bad" etc. 10/14/25, 3:20 PM OneNote
https://tecace.sharepoint.com/sites/PM-MarketingTeam/_layouts/15/Doc.aspx?sourcedoc={79068749-5424-4c58-88f8-aad6c753a60f}&action=edit&wd=target%28%… 2/5
g
  feedback_text = null,           // to be
added to feedback section 
  corrected_response = null,      // to be
added to FAQ section 
  updated_at = null               //
timestamp if needed 
}) { 
  const { data, error } = await supabase 
    .from('admin_feedback') 
    .insert([ 
      { 
        chat_id, 
        feedback_verdict, 
        feedback_text, 
        corrected_response, 
        updated_at 
      } 
    ]) 
    .select() // return the inserted
row(s) 
  return data 
} 
 
User Feedback 
The user_feedback data table looks as shown below: 
 
Like all other data tables id and created_at are automatically
generated upon data creation and just like admin_feedback the
chat_id field is used to reference the chat message's unique id
that the feedback is being made for. The chat_id field is is only
required field as well. The user_id value should contain the id
of the user that submits the feedback while the reaction (good
or bad) and feedback_text contain the actual feedback
content. 
 
From the chat UI the user should be able to submit their
feedback to create new user_feedback data (refer to data
creation function above). 
 
From the dashboard UI the entire list of user_feedback data
should be retrieved for display (refer to retrieval function shown
above). 
 
Webhook - RAG Management 
Our n8n workflow was set up with a RAG system that took
uploaded files and vectorized data to be used to generate
responses. Now a webhook trigger node has been added
allowing us to upload files to the RAG system using an API
call. 
 
10/14/25, 3:20 PM OneNote
https://tecace.sharepoint.com/sites/PM-MarketingTeam/_layouts/15/Doc.aspx?sourcedoc={79068749-5424-4c58-88f8-aad6c753a60f}&action=edit&wd=target%28%… 3/5
 
API Setup 
Below is an example of how to set up the API call using cURL: 
 
curl -X POST \ 
  -H "Accept: */*" \ 
  -F "Files=@/path/to/file1.pdf" \ 
  -F "Files=@/path/to/file2.pdf" \ 
  -F "Files=@/path/to/file3.pdf" \ 
 
"https://n8n.srv978041.hstgr.cloud/webhook
/1f18f1aa-44c4-467f-b299-c87c9b6f9459" 
 
Using Axios and Formdata we can set up the call in our script
file as well: 
 
import axios from "axios"; 
import FormData from "form-data"; 
import fs from "fs"; 
 
const formData = new FormData(); 
 
// For Node.js: use fs.createReadStream to
attach files 
formData.append("Files",
fs.createReadStream("./path/to/file1.png")
); 
formData.append("Files",
fs.createReadStream("./path/to/file2.jpg")
); 
 
const res = await axios.post( 
 
"https://n8n.srv978041.hstgr.cloud/webhook
-test/1f18f1aa-44c4-467f-b299-
c87c9b6f9459", 
  formData, 
  { 
    headers: formData.getHeaders(), //
Important for multipart 
  } 
); 
 10/14/25, 3:20 PM OneNote
https://tecace.sharepoint.com/sites/PM-MarketingTeam/_layouts/15/Doc.aspx?sourcedoc={79068749-5424-4c58-88f8-aad6c753a60f}&action=edit&wd=target%28%… 4/5
10/14/25, 3:20 PM OneNote
https://tecace.sharepoint.com/sites/PM-MarketingTeam/_layouts/15/Doc.aspx?sourcedoc={79068749-5424-4c58-88f8-aad6c753a60f}&action=edit&wd=target%28%… 5/5

