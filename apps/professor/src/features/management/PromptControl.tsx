import React, { useState, useEffect } from 'react';
import { Card } from '../../components/ui/Card';
import { useTranslation } from '../../i18n/I18nProvider';

const PromptControl: React.FC = () => {
  const { t } = useTranslation();
  const [systemPrompt, setSystemPrompt] = useState('');
  const [model, setModel] = useState('gpt-4');
  const [endpoint, setEndpoint] = useState('https://api.openai.com/v1/chat/completions');
  const [lastUpdated, setLastUpdated] = useState<{ by: string; timestamp: string } | null>(null);
  const [testModalOpen, setTestModalOpen] = useState(false);
  const [testInput, setTestInput] = useState('');
  const [testResponse, setTestResponse] = useState('');
  const [testing, setTesting] = useState(false);

  useEffect(() => {
    // Load saved prompt
    const savedPrompt = localStorage.getItem('axpro_system_prompt');
    if (savedPrompt) {
      setSystemPrompt(savedPrompt);
    }

    // Load last updated info
    const lastUpdatedInfo = localStorage.getItem('axpro_prompt_last_updated');
    if (lastUpdatedInfo) {
      setLastUpdated(JSON.parse(lastUpdatedInfo));
    }
  }, []);

  const handleSave = () => {
    localStorage.setItem('axpro_system_prompt', systemPrompt);
    const updateInfo = {
      by: 'admin@tecace.com',
      timestamp: new Date().toISOString()
    };
    localStorage.setItem('axpro_prompt_last_updated', JSON.stringify(updateInfo));
    setLastUpdated(updateInfo);
    
    // Show success message
    alert('Prompt saved successfully!');
  };

  const handleRevert = () => {
    if (confirm('Are you sure you want to revert to the last saved version?')) {
      const savedPrompt = localStorage.getItem('axpro_system_prompt');
      if (savedPrompt) {
        setSystemPrompt(savedPrompt);
      }
    }
  };

  const handleTest = async () => {
    if (!testInput.trim()) return;
    
    setTesting(true);
    try {
      // Simulate API call
      await new Promise(resolve => setTimeout(resolve, 2000));
      
      // Mock response
      setTestResponse(`This is a test response for: "${testInput}"\n\nGenerated by ${model} at ${endpoint}`);
    } catch (error) {
      setTestResponse('Error: Failed to get test response');
    } finally {
      setTesting(false);
    }
  };

  const characterCount = systemPrompt.length;
  const maxCharacters = 4000;

  return (
    <div className="space-y-6">
      <Card
        header={t('mgmt.prompt')}
        subheader="Configure the system prompt for the chatbot"
        actions={
          <div className="flex items-center space-x-2">
            <button
              onClick={handleRevert}
              className="text-sm px-3 py-1 rounded border hover:bg-gray-50"
              style={{ borderColor: 'var(--border)', color: 'var(--text-secondary)' }}
            >
              {t('actions.revert')}
            </button>
            <button
              onClick={handleSave}
              className="text-sm px-3 py-1 rounded border hover:bg-gray-50"
              style={{ borderColor: 'var(--border)', color: 'var(--text-secondary)' }}
            >
              {t('actions.save')}
            </button>
            <button
              onClick={() => setTestModalOpen(true)}
              className="text-sm px-3 py-1 rounded border hover:bg-gray-50"
              style={{ borderColor: 'var(--border)', color: 'var(--text-secondary)' }}
            >
              {t('actions.test')}
            </button>
          </div>
        }
      >
        <div className="space-y-4">
          {/* Model and Endpoint */}
          <div className="grid grid-cols-2 gap-4">
            <div>
              <label className="block text-sm font-medium mb-2" style={{ color: 'var(--text)' }}>
                Model
              </label>
              <input
                type="text"
                value={model}
                onChange={(e) => setModel(e.target.value)}
                className="w-full px-3 py-2 border rounded"
                style={{ 
                  backgroundColor: 'var(--card)', 
                  borderColor: 'var(--border)', 
                  color: 'var(--text)' 
                }}
                readOnly
              />
            </div>
            <div>
              <label className="block text-sm font-medium mb-2" style={{ color: 'var(--text)' }}>
                Endpoint
              </label>
              <input
                type="text"
                value={endpoint}
                onChange={(e) => setEndpoint(e.target.value)}
                className="w-full px-3 py-2 border rounded"
                style={{ 
                  backgroundColor: 'var(--card)', 
                  borderColor: 'var(--border)', 
                  color: 'var(--text)' 
                }}
                readOnly
              />
            </div>
          </div>

          {/* System Prompt */}
          <div>
            <label className="block text-sm font-medium mb-2" style={{ color: 'var(--text)' }}>
              System Prompt
            </label>
            <textarea
              value={systemPrompt}
              onChange={(e) => setSystemPrompt(e.target.value)}
              className="w-full px-3 py-2 border rounded"
              style={{ 
                backgroundColor: 'var(--card)', 
                borderColor: 'var(--border)', 
                color: 'var(--text)' 
              }}
              rows={12}
              placeholder="Enter the system prompt for the chatbot..."
            />
            <div className="flex justify-between items-center mt-2">
              <span className="text-xs" style={{ color: 'var(--text-muted)' }}>
                {characterCount} / {maxCharacters} characters
              </span>
              {characterCount > maxCharacters && (
                <span className="text-xs text-red-600">
                  Exceeds maximum length
                </span>
              )}
            </div>
          </div>

          {/* Version Info */}
          {lastUpdated && (
            <div className="text-sm" style={{ color: 'var(--text-secondary)' }}>
              Last updated by {lastUpdated.by} on {new Date(lastUpdated.timestamp).toLocaleString()}
            </div>
          )}
        </div>
      </Card>

      {/* Test Modal */}
      {testModalOpen && (
        <div className="fixed inset-0 z-50 overflow-hidden">
          <div className="absolute inset-0 bg-black bg-opacity-50" onClick={() => setTestModalOpen(false)} />
          <div className="absolute inset-0 flex items-center justify-center p-4">
            <div 
              className="w-full max-w-2xl rounded-lg border"
              style={{ 
                backgroundColor: 'var(--card)', 
                borderColor: 'var(--border)' 
              }}
            >
              <div className="p-6">
                <div className="flex justify-between items-center mb-4">
                  <h3 className="text-lg font-semibold" style={{ color: 'var(--text)' }}>
                    Test Prompt
                  </h3>
                  <button
                    onClick={() => setTestModalOpen(false)}
                    className="p-2 rounded-md hover:bg-gray-100"
                    style={{ color: 'var(--text-secondary)' }}
                  >
                    âœ•
                  </button>
                </div>
                
                <div className="space-y-4">
                  <div>
                    <label className="block text-sm font-medium mb-2" style={{ color: 'var(--text)' }}>
                      Test Input
                    </label>
                    <textarea
                      value={testInput}
                      onChange={(e) => setTestInput(e.target.value)}
                      className="w-full px-3 py-2 border rounded"
                      style={{ 
                        backgroundColor: 'var(--card)', 
                        borderColor: 'var(--border)', 
                        color: 'var(--text)' 
                      }}
                      rows={3}
                      placeholder="Enter a test message..."
                    />
                  </div>
                  
                  <div className="flex justify-end space-x-2">
                    <button
                      onClick={() => setTestModalOpen(false)}
                      className="px-4 py-2 text-sm rounded border hover:bg-gray-50"
                      style={{ borderColor: 'var(--border)', color: 'var(--text-secondary)' }}
                    >
                      Cancel
                    </button>
                    <button
                      onClick={handleTest}
                      disabled={testing || !testInput.trim()}
                      className="px-4 py-2 text-sm rounded border hover:bg-gray-50 disabled:opacity-50"
                      style={{ borderColor: 'var(--border)', color: 'var(--text-secondary)' }}
                    >
                      {testing ? 'Testing...' : 'Test'}
                    </button>
                  </div>
                  
                  {testResponse && (
                    <div>
                      <label className="block text-sm font-medium mb-2" style={{ color: 'var(--text)' }}>
                        Response
                      </label>
                      <div 
                        className="p-3 rounded border"
                        style={{ 
                          backgroundColor: 'var(--bg-secondary)', 
                          borderColor: 'var(--border)' 
                        }}
                      >
                        <pre className="whitespace-pre-wrap text-sm" style={{ color: 'var(--text)' }}>
                          {testResponse}
                        </pre>
                      </div>
                    </div>
                  )}
                </div>
              </div>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default PromptControl;
